-- COLORS
-- enable syntax highlighting
vim.cmd('syntax on')
-- change the color of the line numbers
vim.cmd('highlight LineNr ctermfg=white')
-- enable nerd font
vim.g.have_nerd_font = true

-- BASICS
-- enable relative line numbers
vim.o.number = true
vim.o.relativenumber = true
-- hide the mode as it is in the statusline
vim.o.showmode = false

-- indent and tab settings
vim.o.autoindent = true
vim.o.breakindent = true
vim.o.expandtab = true
vim.o.tabstop = 8
vim.o.shiftwidth = 8
vim.o.smarttab = true

-- minimum number of lines to keep above and below the cursor
vim.o.scrolloff = 25
-- disable to keep the system keyboard independent
vim.o.clipboard = 'unnamedplus'
-- save undo history
vim.opt.undofile = true
-- change to "a" to enable mouse "" to disable
vim.o.mouse = ""

-- timeout for which-key
vim.o.timeout = true
vim.o.timeoutlen = 800

--KEYMAPS
-- set leader key, must be done before loading plugins
vim.g.mapleader = " "
vim.g.maplocalleader = " "
local map = vim.api.nvim_set_keymap

-- create a new tmux session with tmux sessioniser
map('n', '<C-t>', ':silent !tmux neww tmux-sessioniser<CR>', {noremap = true, silent = true})

-- Set highlight on search but clear on pressing Esc in normal mode
vim.o.hlsearch = true
-- vim.keymap.set('n', '<ESC>', ':nohlsearch<CR>')

-- Disable arrow keys in normal mode
vim.keymap.set('n', '<left>', '<cmd>echo "Use h"<CR>')
vim.keymap.set('n', '<right>', '<cmd>echo "Use l"<CR>')
vim.keymap.set('n', '<up>', '<cmd>echo "Use k"<CR>')
vim.keymap.set('n', '<down>', '<cmd>echo "Use j"<CR>')


-- HIGHLIGHT ON YANK
vim.api.nvim_create_autocmd('TextYankPost', {
        desc = 'Highlight on yank',
        group = vim.api.nvim_create_augroup('HighlightOnYank', { clear = true }),
        callback = function()
                vim.highlight.on_yank()
        end,
})


require('nvim-treesitter.configs').setup {
    ensure_installed = {},

    auto_install = false,

    highlight = { enable = true },

    indent = { enable = true },
}

vim.keymap.set('n', '<leader>nt', ':Neotree toggle left<CR>', {})

require('Comment').setup()

require("catppuccin").setup({
        flavour = "mocha",
})
vim.cmd.colorscheme("catppuccin")
--vim command for transparent background
vim.cmd("hi Normal guibg=NONE ctermbg=NONE")
vim.opt.termguicolors = true

local cmp = require("cmp")
require("fidget").setup()
require("luasnip.loaders.from_vscode").lazy_load()

cmp.setup({
        snippet = {
                -- REQUIRED - you must specify a snippet engine
                expand = function(args)
                        require("luasnip").lsp_expand(args.body) -- For `luasnip` users.
                end,
        },
        window = {
                completion = cmp.config.window.bordered(),
                documentation = cmp.config.window.bordered(),
        },
        mapping = cmp.mapping.preset.insert({
                ["<C-b>"] = cmp.mapping.scroll_docs(-4),
                ["<C-f>"] = cmp.mapping.scroll_docs(4),
                ["<C-Space>"] = cmp.mapping.complete(),
                ["<C-e>"] = cmp.mapping.abort(),
                ["<C-y>"] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
        }),
        sources = cmp.config.sources({
                { name = "nvim_lsp" },
                { name = "luasnip" }, -- For luasnip users.
        }, {
                { name = "buffer" },
        }),
})

vim.keymap.set('i', '<C-S>', 'copilot#Accept("\\<CR>")', {
        expr = true,
        replace_keycodes = false,
})
vim.g.copilot_no_tab_map = true
vim.keymap.set('n', '<leader>cpe', ':Copilot enable<CR>')
vim.keymap.set('n', '<leader>cpd', ':Copilot disable<CR>')

require('dashboard').setup{
        theme = 'hyper',
        hide ={
                statusline,
                tabline,
                winbar
        },
        config = {
                week_header = {
                        enable = true,
                },
                shortcut = {
                        { desc = '󰊳 Update', group = '@property', action = 'Lazy update', key = 'u' },
                        {
                                icon = ' ',
                                icon_hl = '@variable',
                                desc = 'Files',
                                group = 'Label',
                                action = 'Telescope find_files',
                                key = 'f',
                        },
                        {
                                desc = ' Apps',
                                group = 'DiagnosticHint',
                                action = 'Telescope app',
                                key = 'a',
                        },
                        {
                                desc = ' dotfiles',
                                group = 'Number',
                                action = 'Files ~/.config',
                                key = 'd',
                        },
                },
        },
}

require("ibl").setup{
        exclude = {filetypes = {"dashboard", "Neotree", "lazy"}, buftypes = {"terminal"} },
        indent = {char = "│"},
        whitespace = { highlight = {"Whitespace", "NonText"} },
}

require("mason").setup()
require("mason-lspconfig").setup({
        ensure_installed = {
                "lua_ls",
                "jedi_language_server",
                "rust_analyzer",
        },
        handlers = {
                function (server_name)
                        require("lspconfig")[server_name].setup {}
                end,
        }
})
local capabilities = require("cmp_nvim_lsp").default_capabilities()

local lspconfig = require("lspconfig")
lspconfig.lua_ls.setup({
        capabilities = capabilities
})
lspconfig.jedi_language_server.setup({
        capabilities = capabilities
})
lspconfig.rust_analyzer.setup({
        capabilities = capabilities
})
vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
vim.keymap.set("n", "gd", vim.lsp.buf.definition, {})
vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, {})

local statusline = require 'mini.statusline'
statusline.setup { use_icons = vim.g.have_nerd_font }
statusline.section_location = function()
        return '%2l:%-2v'
end

local null_ls = require("null-ls")
null_ls.setup({
        sources = {
                null_ls.builtins.formatting.stylua,
                null_ls.builtins.formatting.black,
                null_ls.builtins.formatting.isort,
        },
})
vim.keymap.set("n", "<leader>gf", vim.lsp.buf.format, {})

require("telescope").setup({
        pickers = {
                find_files = {
                        hidden = true
                }
        },
        extensions = {
                ["ui-select"] = {
                        require("telescope.themes").get_dropdown({}),
                },
        },
})

require("telescope").load_extension("ui-select")


local builtin = require("telescope.builtin")

vim.keymap.set('n', '<leader>sh', builtin.help_tags, { desc = '[S]earch [H]elp'})
vim.keymap.set("n", "<leader>sf", builtin.find_files, { desc = '[S]earch [F]iles' })
vim.keymap.set("n", "<leader>sg", builtin.live_grep, { desc = '[S]earch [G]rep' })
vim.keymap.set("n", "<leader>sr", builtin.oldfiles, { desc = '[S]earch [R]ecent' })



local harpoon = require("harpoon")
harpoon:setup()

vim.keymap.set("n", "<leader>h<space>", function()
        harpoon:list():append()
end)
vim.keymap.set("n", "<leader>hh", function()
        harpoon.ui:toggle_quick_menu(harpoon:list())
end)

vim.keymap.set("n", "<leader>hp", function() harpoon:list():prev() end)
vim.keymap.set("n", "<leader>hn", function() harpoon:list():next() end)

